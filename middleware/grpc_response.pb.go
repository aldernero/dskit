// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: grpc_response.proto

package middleware

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type FakeGRPCResponse struct {
	GRPCResponse `protobuf:"bytes,1,opt,name=Response,proto3,embedded=Response" json:"Response"`
	Status       string `protobuf:"bytes,2,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (m *FakeGRPCResponse) Reset()      { *m = FakeGRPCResponse{} }
func (*FakeGRPCResponse) ProtoMessage() {}
func (*FakeGRPCResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_450b57841f32bf1b, []int{0}
}
func (m *FakeGRPCResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FakeGRPCResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FakeGRPCResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FakeGRPCResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FakeGRPCResponse.Merge(m, src)
}
func (m *FakeGRPCResponse) XXX_Size() int {
	return m.Size()
}
func (m *FakeGRPCResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FakeGRPCResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FakeGRPCResponse proto.InternalMessageInfo

func (m *FakeGRPCResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type GRPCResponse struct {
	Success *GRPCSuccess `protobuf:"bytes,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Error   *GRPCError   `protobuf:"bytes,2,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (m *GRPCResponse) Reset()      { *m = GRPCResponse{} }
func (*GRPCResponse) ProtoMessage() {}
func (*GRPCResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_450b57841f32bf1b, []int{1}
}
func (m *GRPCResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GRPCResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GRPCResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GRPCResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GRPCResponse.Merge(m, src)
}
func (m *GRPCResponse) XXX_Size() int {
	return m.Size()
}
func (m *GRPCResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GRPCResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GRPCResponse proto.InternalMessageInfo

func (m *GRPCResponse) GetSuccess() *GRPCSuccess {
	if m != nil {
		return m.Success
	}
	return nil
}

func (m *GRPCResponse) GetError() *GRPCError {
	if m != nil {
		return m.Error
	}
	return nil
}

type GRPCError struct {
	Message   string `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	ShouldLog bool   `protobuf:"varint,2,opt,name=ShouldLog,proto3" json:"ShouldLog,omitempty"`
}

func (m *GRPCError) Reset()      { *m = GRPCError{} }
func (*GRPCError) ProtoMessage() {}
func (*GRPCError) Descriptor() ([]byte, []int) {
	return fileDescriptor_450b57841f32bf1b, []int{2}
}
func (m *GRPCError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GRPCError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GRPCError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GRPCError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GRPCError.Merge(m, src)
}
func (m *GRPCError) XXX_Size() int {
	return m.Size()
}
func (m *GRPCError) XXX_DiscardUnknown() {
	xxx_messageInfo_GRPCError.DiscardUnknown(m)
}

var xxx_messageInfo_GRPCError proto.InternalMessageInfo

func (m *GRPCError) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *GRPCError) GetShouldLog() bool {
	if m != nil {
		return m.ShouldLog
	}
	return false
}

type GRPCSuccess struct {
	Message string `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (m *GRPCSuccess) Reset()      { *m = GRPCSuccess{} }
func (*GRPCSuccess) ProtoMessage() {}
func (*GRPCSuccess) Descriptor() ([]byte, []int) {
	return fileDescriptor_450b57841f32bf1b, []int{3}
}
func (m *GRPCSuccess) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GRPCSuccess) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GRPCSuccess.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GRPCSuccess) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GRPCSuccess.Merge(m, src)
}
func (m *GRPCSuccess) XXX_Size() int {
	return m.Size()
}
func (m *GRPCSuccess) XXX_DiscardUnknown() {
	xxx_messageInfo_GRPCSuccess.DiscardUnknown(m)
}

var xxx_messageInfo_GRPCSuccess proto.InternalMessageInfo

func (m *GRPCSuccess) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*FakeGRPCResponse)(nil), "middleware.FakeGRPCResponse")
	proto.RegisterType((*GRPCResponse)(nil), "middleware.GRPCResponse")
	proto.RegisterType((*GRPCError)(nil), "middleware.GRPCError")
	proto.RegisterType((*GRPCSuccess)(nil), "middleware.GRPCSuccess")
}

func init() { proto.RegisterFile("grpc_response.proto", fileDescriptor_450b57841f32bf1b) }

var fileDescriptor_450b57841f32bf1b = []byte{
	// 313 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x51, 0x3d, 0x4e, 0x02, 0x41,
	0x14, 0x9e, 0x31, 0x11, 0xd8, 0x87, 0x85, 0x59, 0xa3, 0x6e, 0x8c, 0x79, 0x90, 0x6d, 0x24, 0x31,
	0x2e, 0x11, 0xad, 0x2d, 0x20, 0x6a, 0xa3, 0x89, 0x19, 0x0e, 0x60, 0x96, 0x65, 0x1c, 0x50, 0x60,
	0xc8, 0xcc, 0x6e, 0x6c, 0x3d, 0x82, 0xc7, 0xf0, 0x28, 0x94, 0x5b, 0x52, 0x11, 0x19, 0x1a, 0x4b,
	0x8e, 0x60, 0x32, 0x2c, 0x3f, 0x92, 0xd8, 0xbd, 0xef, 0x7d, 0x7f, 0x33, 0x79, 0x70, 0x20, 0xd4,
	0x30, 0x7a, 0x56, 0x5c, 0x0f, 0xe5, 0x40, 0xf3, 0x60, 0xa8, 0x64, 0x2c, 0x5d, 0xe8, 0x77, 0xdb,
	0xed, 0x1e, 0x7f, 0x0f, 0x15, 0x3f, 0xb9, 0x10, 0xdd, 0xb8, 0x93, 0xb4, 0x82, 0x48, 0xf6, 0xab,
	0x42, 0x0a, 0x59, 0xb5, 0x92, 0x56, 0xf2, 0x62, 0x91, 0x05, 0x76, 0x5a, 0x58, 0xfd, 0x57, 0xd8,
	0xbf, 0x0b, 0xdf, 0xf8, 0x3d, 0x7b, 0x6a, 0xb0, 0x2c, 0xd4, 0xbd, 0x81, 0xc2, 0x72, 0xf6, 0x68,
	0x99, 0x56, 0x8a, 0x35, 0x2f, 0x58, 0x37, 0x04, 0x9b, 0xda, 0x7a, 0x61, 0x34, 0x29, 0x91, 0x74,
	0x52, 0xa2, 0x6c, 0xe5, 0x71, 0x8f, 0x20, 0xd7, 0x8c, 0xc3, 0x38, 0xd1, 0xde, 0x4e, 0x99, 0x56,
	0x1c, 0x96, 0x21, 0x7f, 0x00, 0x7b, 0x7f, 0x7a, 0x2e, 0x21, 0xdf, 0x4c, 0xa2, 0x88, 0x6b, 0x9d,
	0xd5, 0x1c, 0x6f, 0xd7, 0x64, 0x34, 0x5b, 0xea, 0xdc, 0x73, 0xd8, 0xbd, 0x55, 0x4a, 0x2a, 0x9b,
	0x5c, 0xac, 0x1d, 0x6e, 0x1b, 0x2c, 0xc9, 0x16, 0x1a, 0xbf, 0x01, 0xce, 0x6a, 0xe7, 0x7a, 0x90,
	0x7f, 0xe4, 0x5a, 0x87, 0x62, 0xf1, 0x27, 0x87, 0x2d, 0xa1, 0x7b, 0x0a, 0x4e, 0xb3, 0x23, 0x93,
	0x5e, 0xfb, 0x41, 0x0a, 0x9b, 0x5b, 0x60, 0xeb, 0x85, 0x7f, 0x06, 0xc5, 0x8d, 0x97, 0xfc, 0x1f,
	0x53, 0xbf, 0x4e, 0xa7, 0x48, 0xc6, 0x53, 0x24, 0xf3, 0x29, 0xd2, 0x0f, 0x83, 0xf4, 0xcb, 0x20,
	0x1d, 0x19, 0xa4, 0xa9, 0x41, 0xfa, 0x6d, 0x90, 0xfe, 0x18, 0x24, 0x73, 0x83, 0xf4, 0x73, 0x86,
	0x24, 0x9d, 0x21, 0x19, 0xcf, 0x90, 0xb4, 0x72, 0xf6, 0x0c, 0x57, 0xbf, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x7e, 0x48, 0x31, 0xe9, 0xd8, 0x01, 0x00, 0x00,
}

func (this *FakeGRPCResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FakeGRPCResponse)
	if !ok {
		that2, ok := that.(FakeGRPCResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GRPCResponse.Equal(&that1.GRPCResponse) {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	return true
}
func (this *GRPCResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GRPCResponse)
	if !ok {
		that2, ok := that.(GRPCResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Success.Equal(that1.Success) {
		return false
	}
	if !this.Error.Equal(that1.Error) {
		return false
	}
	return true
}
func (this *GRPCError) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GRPCError)
	if !ok {
		that2, ok := that.(GRPCError)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	if this.ShouldLog != that1.ShouldLog {
		return false
	}
	return true
}
func (this *GRPCSuccess) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GRPCSuccess)
	if !ok {
		that2, ok := that.(GRPCSuccess)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	return true
}
func (this *FakeGRPCResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&middleware.FakeGRPCResponse{")
	s = append(s, "GRPCResponse: "+strings.Replace(this.GRPCResponse.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GRPCResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&middleware.GRPCResponse{")
	if this.Success != nil {
		s = append(s, "Success: "+fmt.Sprintf("%#v", this.Success)+",\n")
	}
	if this.Error != nil {
		s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GRPCError) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&middleware.GRPCError{")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "ShouldLog: "+fmt.Sprintf("%#v", this.ShouldLog)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GRPCSuccess) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&middleware.GRPCSuccess{")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringGrpcResponse(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *FakeGRPCResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FakeGRPCResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FakeGRPCResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintGrpcResponse(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.GRPCResponse.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGrpcResponse(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GRPCResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GRPCResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GRPCResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGrpcResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Success != nil {
		{
			size, err := m.Success.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGrpcResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GRPCError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GRPCError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GRPCError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ShouldLog {
		i--
		if m.ShouldLog {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintGrpcResponse(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GRPCSuccess) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GRPCSuccess) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GRPCSuccess) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintGrpcResponse(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGrpcResponse(dAtA []byte, offset int, v uint64) int {
	offset -= sovGrpcResponse(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FakeGRPCResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.GRPCResponse.Size()
	n += 1 + l + sovGrpcResponse(uint64(l))
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovGrpcResponse(uint64(l))
	}
	return n
}

func (m *GRPCResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success != nil {
		l = m.Success.Size()
		n += 1 + l + sovGrpcResponse(uint64(l))
	}
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovGrpcResponse(uint64(l))
	}
	return n
}

func (m *GRPCError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovGrpcResponse(uint64(l))
	}
	if m.ShouldLog {
		n += 2
	}
	return n
}

func (m *GRPCSuccess) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovGrpcResponse(uint64(l))
	}
	return n
}

func sovGrpcResponse(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGrpcResponse(x uint64) (n int) {
	return sovGrpcResponse(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *FakeGRPCResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FakeGRPCResponse{`,
		`GRPCResponse:` + strings.Replace(strings.Replace(this.GRPCResponse.String(), "GRPCResponse", "GRPCResponse", 1), `&`, ``, 1) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GRPCResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GRPCResponse{`,
		`Success:` + strings.Replace(this.Success.String(), "GRPCSuccess", "GRPCSuccess", 1) + `,`,
		`Error:` + strings.Replace(this.Error.String(), "GRPCError", "GRPCError", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GRPCError) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GRPCError{`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`ShouldLog:` + fmt.Sprintf("%v", this.ShouldLog) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GRPCSuccess) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GRPCSuccess{`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGrpcResponse(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *FakeGRPCResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrpcResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FakeGRPCResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FakeGRPCResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GRPCResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpcResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGrpcResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGrpcResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GRPCResponse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpcResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpcResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGrpcResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGrpcResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGrpcResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGrpcResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GRPCResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrpcResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GRPCResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GRPCResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpcResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGrpcResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGrpcResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Success == nil {
				m.Success = &GRPCSuccess{}
			}
			if err := m.Success.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpcResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGrpcResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGrpcResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &GRPCError{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGrpcResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGrpcResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGrpcResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GRPCError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrpcResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GRPCError: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GRPCError: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpcResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpcResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGrpcResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShouldLog", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpcResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShouldLog = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGrpcResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGrpcResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGrpcResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GRPCSuccess) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrpcResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GRPCSuccess: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GRPCSuccess: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpcResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpcResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGrpcResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGrpcResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGrpcResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGrpcResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGrpcResponse(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGrpcResponse
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGrpcResponse
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGrpcResponse
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGrpcResponse
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthGrpcResponse
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGrpcResponse
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGrpcResponse(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthGrpcResponse
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGrpcResponse = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGrpcResponse   = fmt.Errorf("proto: integer overflow")
)
